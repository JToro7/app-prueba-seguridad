name: 🚀 CI/CD Pipeline - App Segura

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18.x'
  HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
  
jobs:
  # ===============================================
  # 🧪 TESTING STAGE
  # ===============================================
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm install --save-dev @types/node
        
    - name: 🔍 Lint & Code Quality
      run: |
        # Verificar que no hay errores de sintaxis
        node -c src/backend/server.js
        echo "✅ Código validado sin errores de sintaxis"
        
    - name: 🧪 Run Unit Tests
      run: |
        npm run test:unit
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-ci
        
    - name: 🔗 Run Integration Tests  
      run: |
        npm run test:integration
      env:
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-ci
        GOOGLE_CLIENT_ID: test-client-id
        GOOGLE_CLIENT_SECRET: test-client-secret
        
    - name: 💨 Run Smoke Tests
      run: |
        npm run test:smoke
      env:
        NODE_ENV: test
        
    - name: 📊 Generate Coverage Report
      run: |
        npm run test:coverage
      env:
        NODE_ENV: test
        
    - name: 📤 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
  # ===============================================
  # 🌐 E2E TESTING STAGE
  # ===============================================
  e2e-tests:
    name: 🌐 End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🖥️ Run Cypress E2E Tests
      uses: cypress-io/github-action@v6
      with:
        build: npm run build
        start: npm run dev
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: true
        parallel: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-cypress
        
    - name: 📸 Upload Cypress Screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        
    - name: 🎥 Upload Cypress Videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: cypress/videos

  # ===============================================
  # 🔒 SECURITY CHECKS
  # ===============================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔍 Run Security Audit
      run: |
        npm audit --audit-level high
        npm audit fix --dry-run
        
    - name: 🛡️ Run Snyk Security Test
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: 🔐 OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'app-prueba-seguridad'
        path: '.'
        format: 'HTML'
        
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: reports/

  # ===============================================
  # 🚀 DEPLOYMENT STAGE
  # ===============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, security]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://${{ secrets.HEROKU_STAGING_APP }}.herokuapp.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Install Dependencies
      run: npm ci --production
      
    - name: 🏗️ Build Application
      run: |
        echo "Building application for staging..."
        # Agregar comandos de build si es necesario
        
    - name: 🚀 Deploy to Heroku Staging
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_STAGING_APP }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        healthcheck: "https://${{ secrets.HEROKU_STAGING_APP }}.herokuapp.com/api/info"
        delay: 30
        rollbackonhealthcheckfailed: true
        
    - name: 🔄 Run Post-Deploy Health Check
      run: |
        echo "Waiting for staging deployment..."
        sleep 30
        curl -f https://${{ secrets.HEROKU_STAGING_APP }}.herokuapp.com/api/info || exit 1
        echo "✅ Staging deployment successful!"

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: https://${{ secrets.HEROKU_PRODUCTION_APP }}.herokuapp.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Install Dependencies
      run: npm ci --production
      
    - name: 🏗️ Build Production Application
      run: |
        echo "Building application for production..."
        export NODE_ENV=production
        # Agregar comandos de build de producción
        
    - name: 🌟 Deploy to Heroku Production
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_PRODUCTION_APP }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        healthcheck: "https://${{ secrets.HEROKU_PRODUCTION_APP }}.herokuapp.com/api/info"
        delay: 30
        rollbackonhealthcheckfailed: true
        
    - name: 🔄 Production Health Check
      run: |
        echo "Verificando despliegue en producción..."
        sleep 45
        curl -f https://${{ secrets.HEROKU_PRODUCTION_APP }}.herokuapp.com/api/info || exit 1
        echo "✅ Production deployment successful!"
        
    - name: 📱 Notify Success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "🚀 Production deployment successful!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ===============================================
  # 📊 MONITORING & NOTIFICATIONS
  # ===============================================
  notify:
    name: 📱 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 📱 Notify Slack - Success
      if: needs.deploy-production.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          🚀 Deployment Success!
          App: https://${{ secrets.HEROKU_PRODUCTION_APP }}.herokuapp.com
          Commit: ${{ github.event.head_commit.message }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: 📱 Notify Slack - Failure  
      if: needs.deploy-production.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          ❌ Deployment Failed!
          Please check the logs and fix issues.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}